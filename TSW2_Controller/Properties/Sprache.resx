<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Als Wert für den Zeitfaktor kannst du nun" xml:space="preserve">
    <value>Als Wert für den Zeitfaktor kannst du nun </value>
  </data>
  <data name="Auf welcher Zahl bist du gelandet" xml:space="preserve">
    <value>Auf welcher Zahl bist du gelandet?</value>
  </data>
  <data name="Bremse ist" xml:space="preserve">
    <value>Bremse ist</value>
  </data>
  <data name="Bremsindikator_Leer__Standard_Laden" xml:space="preserve">
    <value>Bremsindikator leer! Standard laden?</value>
  </data>
  <data name="Druecke nochmal auf OK wechsel innerhalb von 7 Sekunden zum TSW und warte" xml:space="preserve">
    <value>Drücke nochmal auf OK, wechsel innerhalb von 7 Sekunden zum TSW und warte</value>
  </data>
  <data name="Du hast die neueste Version" xml:space="preserve">
    <value>Du hast die neueste Version</value>
  </data>
  <data name="Du_hast_noch_keinen_Startwert_eingetragen" xml:space="preserve">
    <value>Du hast noch keinen Startwert eingetragen!</value>
  </data>
  <data name="Eintraege_geloescht" xml:space="preserve">
    <value> Einträge gelöscht!</value>
  </data>
  <data name="eintragen" xml:space="preserve">
    <value> eintragen</value>
  </data>
  <data name="entfernen" xml:space="preserve">
    <value>" entfernen?</value>
  </data>
  <data name="Ersetzt" xml:space="preserve">
    <value>Ersetzt</value>
  </data>
  <data name="Erstellt" xml:space="preserve">
    <value>Erstellt</value>
  </data>
  <data name="Fehler" xml:space="preserve">
    <value>Fehler</value>
  </data>
  <data name="Fehler_beim_Textindikator" xml:space="preserve">
    <value>Fehler beim Textindikator!</value>
  </data>
  <data name="Fehler_bei_Aufloesung" xml:space="preserve">
    <value>Fehler bei Auflösung!</value>
  </data>
  <data name="Fertig" xml:space="preserve">
    <value>Fertig!</value>
  </data>
  <data name="Hinzugefuegt" xml:space="preserve">
    <value>Hinzugefügt</value>
  </data>
  <data name="Hmm da hast du wohl etwas falsch gemacht Die Startzahl sollte groeßer als die Endzahl sein" xml:space="preserve">
    <value>Hmm, da hast du wohl etwas falsch gemacht. Die Startzahl sollte größer als die Endzahl sein.</value>
  </data>
  <data name="Hmm da hat etwas nicht funktioniert Versuche es doch nochmal" xml:space="preserve">
    <value>Hmm, da hat etwas nicht funktioniert. Versuche es doch nochmal.</value>
  </data>
  <data name="ist verfuegbar" xml:space="preserve">
    <value>ist verfügbar</value>
  </data>
  <data name="ist verfuegbar Moechtest du aktualisieren" xml:space="preserve">
    <value> ist verfügbar! Möchtest du aktualisieren?</value>
  </data>
  <data name="Kein Joystick angeschlossen" xml:space="preserve">
    <value>Kein Joystick angeschlossen!</value>
  </data>
  <data name="Keine Nummer erkannt Kann es sein dass du beim Maximum gelandet bist" xml:space="preserve">
    <value>Keine Nummer erkannt. Kann es sein, dass du beim Maximum gelandet bist?</value>
  </data>
  <data name="Kombihebel_Bremsindikator_Leer__Standard_Laden" xml:space="preserve">
    <value>Kombihebel_Bremsindikator leer! Standard laden?</value>
  </data>
  <data name="Kombihebel_Schubindikator_Leer__Standard_Laden" xml:space="preserve">
    <value>Kombihebel_Schubindikator leer! Standard laden?</value>
  </data>
  <data name="lblT1_JoyName" xml:space="preserve">
    <value>JoyName</value>
  </data>
  <data name="lblT1_KnopfNr" xml:space="preserve">
    <value>KnopfNr.</value>
  </data>
  <data name="loeschen" xml:space="preserve">
    <value>" löschen?</value>
  </data>
  <data name="Moechtest_du" xml:space="preserve">
    <value>Möchtest du "</value>
  </data>
  <data name="Nr" xml:space="preserve">
    <value>Nr:</value>
  </data>
  <data name="OK dann stelle den Regler nochmal auf" xml:space="preserve">
    <value>OK, dann stelle den Regler nochmal auf </value>
  </data>
  <data name="Schub ist" xml:space="preserve">
    <value>Schub ist</value>
  </data>
  <data name="Schubindikator_Leer__Standard_Laden" xml:space="preserve">
    <value>Schubindikator leer! Standard laden?</value>
  </data>
  <data name="SprachenName" xml:space="preserve">
    <value>Deutsch</value>
  </data>
  <data name="Stelle den Regler nun auf den bremswert" xml:space="preserve">
    <value>Stelle den Regler nun auf den bremswert</value>
  </data>
  <data name="und bestaetige mit OK" xml:space="preserve">
    <value> und bestätige mit OK</value>
  </data>
  <data name="und soll" xml:space="preserve">
    <value>und soll</value>
  </data>
  <data name="Wechsel_innerhalb_von_7_Sekunden_zum_TSW_und_warte" xml:space="preserve">
    <value>Wechsel innerhalb von 7 Sekunden zum TSW und warte</value>
  </data>
  <data name="Willst_du_wirklich" xml:space="preserve">
    <value>Willst du wirklich "</value>
  </data>
  <data name="Zugauswahl" xml:space="preserve">
    <value>Zugauswahl</value>
  </data>
</root>